// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  active
  inactive
  deleted
  expired

  @@map("UserStatus")
}

enum OrderStatus {
  pending
  completed
  cancelled
  refunded

  @@map("OrderStatus")
}

enum UserRole {
  customer
  admin
}

enum Gender {
  male
  female
}

model User {
  id          String     @id @default(uuid())
  name        String?
  email       String?    @unique
  password    String?
  lastLogin   DateTime?
  phone       String?
  status      UserStatus @default(active)
  role        UserRole   @default(customer)
  createdAt   DateTime   @default(now())
  gender      Gender?
  dateOfBirth DateTime?
  updatedAt   DateTime   @updatedAt
  Order       Order[]

  Jwt Jwt[]
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String?
  amount      Float
  currency    String     @default("JOD")
  status      UserStatus @default(active)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Order       Order[]
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  productId   String
  quantity    Int
  status      OrderStatus @default(pending)
  totalAmount Float
  currency    String      @default("JOD")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Jwt {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
